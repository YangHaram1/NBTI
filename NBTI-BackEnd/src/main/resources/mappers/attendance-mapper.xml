<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Attendance">

    <!-- Insert Attendance Record -->
    <insert id="insert" parameterType="com.nbti.dto.AttendanceDTO">
        <selectKey keyProperty="seq" resultType="int" order="BEFORE">
            SELECT attendance_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO attendance (seq, member_id, today, start_date, end_date)
        VALUES (#{seq}, #{member_id}, SYSDATE, SYSDATE, NULL)
    </insert>

    <!-- Update Clock Out Time -->
    <update id="updateClockOut" parameterType="map">
        UPDATE attendance
        SET end_date = #{end_date}
        WHERE seq = #{seq}
    </update>

    <!-- Get Current Status -->
    <select id="getCurrentStatus" parameterType="string" resultType="com.nbti.dto.AttendanceDTO">
        SELECT * 
        FROM (
            SELECT * 
            FROM attendance
            WHERE member_id = #{memberId}
            AND trunc(start_date) = trunc(sysdate)
            ORDER BY start_date DESC
        )
        WHERE ROWNUM = 1
    </select>

    <!-- Get Weekly Records -->
    <select id="getWeeklyRecords" parameterType="string" resultType="com.nbti.dto.AttendanceDTO">
        SELECT * 
        FROM attendance
        WHERE member_id = #{memberId}
        AND trunc(start_date) >= trunc(sysdate) - 365
        ORDER BY start_date DESC
    </select>

       <!-- Get Weekly Stats -->
    <select id="getWeeklyStats" parameterType="string" resultType="map">
 SELECT
    COUNT(CASE 
        WHEN start_date >= TRUNC(SYSDATE, 'IW') 
        AND start_date > TRUNC(start_date) + INTERVAL '09:00' HOUR TO MINUTE 
        THEN 1 
        ELSE NULL 
    END) AS lateCount,
    COUNT(CASE 
        WHEN start_date >= TRUNC(SYSDATE, 'IW') 
        AND end_date IS NULL 
        AND TRUNC(start_date) = TRUNC(SYSDATE) 
        THEN 1 
        ELSE NULL 
    END) AS absentCount,
    COUNT(CASE 
        WHEN start_date >= TRUNC(SYSDATE, 'IW') 
        AND end_date IS NOT NULL 
        AND end_date &lt; TRUNC(start_date) + INTERVAL '18:00' HOUR TO MINUTE 
        THEN 1 
        ELSE NULL 
    END) AS earlyLeaveCount
FROM attendance
WHERE member_id = #{memberId}
AND start_date >= TRUNC(SYSDATE, 'IW')
AND start_date &lt; TRUNC(SYSDATE, 'IW') + 7;

    </select>
    
 <!-- Get Yearly Records -->
    <select id="getYearlyRecords" parameterType="string" resultType="com.nbti.dto.AttendanceDTO">
        SELECT * 
        FROM attendance
        WHERE member_id = #{memberId}
        AND trunc(start_date) >= trunc(sysdate, 'YYYY')
        AND trunc(start_date) &lt; trunc(sysdate, 'YYYY') + interval '1' year
        ORDER BY start_date DESC
    </select>

    <!-- Get Yearly Stats -->
   <!-- Get Yearly Stats -->
<select id="getYearlyStats" parameterType="string" resultType="map">
    SELECT
        COUNT(CASE 
            WHEN start_date >= TRUNC(SYSDATE, 'YYYY') 
                 AND start_date &lt; TRUNC(SYSDATE, 'YYYY') + INTERVAL '1' YEAR
                 AND start_date > TRUNC(start_date) + INTERVAL '09:00' HOUR TO MINUTE 
            THEN 1 
            ELSE NULL 
        END) AS lateCount,
        COUNT(CASE 
            WHEN start_date >= TRUNC(SYSDATE, 'YYYY') 
                 AND start_date &lt; TRUNC(SYSDATE, 'YYYY') + INTERVAL '1' YEAR
                 AND end_date IS NULL 
                 AND TRUNC(start_date) = TRUNC(SYSDATE) 
                 AND SYSDATE > TRUNC(start_date) + INTERVAL '18:00' HOUR TO MINUTE
            THEN 1 
            ELSE NULL 
        END) AS absentCount,
        COUNT(CASE 
            WHEN start_date >= TRUNC(SYSDATE, 'YYYY') 
                 AND start_date &lt; TRUNC(SYSDATE, 'YYYY') + INTERVAL '1' YEAR
                 AND end_date IS NOT NULL 
                 AND end_date &lt; TRUNC(start_date) + INTERVAL '18:00' HOUR TO MINUTE 
            THEN 1 
            ELSE NULL 
        END) AS earlyLeaveCount,
        COUNT(DISTINCT TRUNC(start_date)) AS statsDay,
        NVL(SUM(
            CASE
                WHEN end_date IS NOT NULL THEN
                    (end_date - start_date) * 24
                ELSE
                    0
            END
        ), 0) AS statsHours
    FROM attendance
    WHERE member_id = #{memberId}
      AND start_date >= TRUNC(SYSDATE, 'YYYY')  
      AND start_date &lt; TRUNC(SYSDATE, 'YYYY') + INTERVAL '1' YEAR
</select>

<select id="getMonthlyRecords" parameterType="map" resultType="com.nbti.dto.AttendanceDTO">
    SELECT *  
    FROM attendance  
    WHERE member_id = #{memberId}  
    AND start_date >= TRUNC(TO_DATE(#{year} || '-' || #{month} || '-01', 'YYYY-MM-DD'), 'MM')  
    AND start_date &lt; ADD_MONTHS(TRUNC(TO_DATE(#{year} || '-' || #{month} || '-01', 'YYYY-MM-DD'), 'MM'), 1)
</select>


<!-- Get Monthly Stats -->
<select id="getMonthlyStats" parameterType="string" resultType="map">
    SELECT
        COUNT(CASE 
            WHEN start_date >= TRUNC(SYSDATE, 'MM') 
            AND start_date > TRUNC(start_date) + INTERVAL '09:00' HOUR TO MINUTE 
            THEN 1 
            ELSE NULL 
        END) AS lateCount,
        COUNT(CASE 
            WHEN start_date >= TRUNC(SYSDATE, 'MM') 
            AND end_date IS NULL 
            AND TRUNC(start_date) = TRUNC(SYSDATE) 
            THEN 1 
            ELSE NULL 
        END) AS absentCount,
        COUNT(CASE 
            WHEN start_date >= TRUNC(SYSDATE, 'MM') 
            AND end_date IS NOT NULL 
            AND end_date &lt; TRUNC(start_date) + INTERVAL '18:00' HOUR TO MINUTE 
            THEN 1 
            ELSE NULL 
        END) AS earlyLeaveCount
    FROM attendance
    WHERE member_id = #{memberId}
    AND start_date >= TRUNC(SYSDATE, 'MM')
    AND start_date &lt; TRUNC(SYSDATE, 'MM') + INTERVAL '1 MONTH';
</select>
<select id="getWeeklyRecordsForAll" parameterType="map" resultType="com.nbti.dto.AttendanceDTO">
SELECT
    m.id AS member_id,
    m.name,
    t.team_name,
    a.start_date,
    a.end_date
FROM members m
LEFT JOIN attendance a ON a.member_id = m.id AND trunc(a.start_date) >= trunc(sysdate) - 365
LEFT JOIN teams t ON m.team_code = t.team_code
ORDER BY m.name

</select>
</mapper>